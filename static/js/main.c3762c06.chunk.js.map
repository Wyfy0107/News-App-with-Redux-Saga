{"version":3,"sources":["Containers/NewsCard.js","App.js","Redux/ActionTypes.js","serviceWorker.js","Redux/Reducer.js","Redux/Sagas.js","index.js"],"names":["NewsCardStyle","styled","div","NewsCard","news","title","description","connect","state","loading","message","dispatch","getNews","type","style","textAlign","onClick","display","flexFlow","map","value","Boolean","window","location","hostname","match","initialState","fetchNews","actionWatcher","rootSaga","fetch","then","response","json","put","articles","error","takeLatest","all","sagaMiddleware","createMiddleware","myStore","createStore","action","applyMiddleware","run","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"igBAGA,IAAMA,E,MAAgBC,EAAOC,IAAV,KAqBJC,MATf,YAA6B,IAATC,EAAQ,EAARA,KAClB,OACE,kBAACJ,EAAD,KACE,4BAAKI,EAAKC,OACV,4BAAKD,EAAKE,eCQhB,IAceC,eAdS,SAACC,GACvB,MAAO,CACLC,QAASD,EAAMC,QACfC,QAASF,EAAME,QACfN,KAAMI,EAAMJ,SAIW,SAACO,GAC1B,MAAO,CACLC,QAAS,kBAAMD,ECpCV,CAAEE,KAAM,iBDwCFN,EAnCf,YAAmD,IAApCK,EAAmC,EAAnCA,QAASH,EAA0B,EAA1BA,QAASL,EAAiB,EAAjBA,KAAMM,EAAW,EAAXA,QAGrC,OACE,yBAAKI,MAAO,CAAEC,UAAW,WACvB,4BAAQC,QAASJ,GAAjB,YACCH,GAAW,2CACZ,6BAAMC,GACN,yBACEI,MAAO,CAAEG,QAAS,OAAQC,SAAU,WAAYH,UAAW,WAE1DX,EACgBA,EAAKe,KAAI,SAACC,GACrB,OAAO,kBAAC,EAAD,CAAUhB,KAAMgB,OAEzB,UETQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBClBAC,EAAe,CACnBjB,SAAS,EACTL,KAAM,M,2CCAEuB,G,WAcAC,G,WAGeC,GAjBzB,SAAUF,IAAV,uEAEiB,OAFjB,kBAEuBG,MACjB,4GACAC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAJlC,OAKI,OAHMA,EAFV,gBAKUC,YAAI,CACRrB,KAAM,gBACNoB,KAAMA,EAAKE,WAPjB,8BAUI,OAVJ,mCAUUD,YAAI,CAAErB,KAAM,iBAAkBuB,MAAK,OAV7C,qDAcA,SAAUR,IAAV,iEACE,OADF,SACQS,YAAW,WAAYV,GAD/B,uCAGe,SAAUE,IAAV,iEACb,OADa,SACPS,YAAI,CAACV,MADE,uCCRf,IAAMW,EAAiBC,cAEjBC,EAAUC,aFRO,WAAmC,IAAlClC,EAAiC,uDAAzBkB,EAAciB,EAAW,uCACvD,OAAQA,EAAO9B,MACb,IAAK,WACH,OAAO,2BAAKL,GAAZ,IAAmBC,SAAS,IAC9B,IAAK,gBACH,OAAO,2BACFD,GADL,IAEEC,SAAS,EACTL,KAAMuC,EAAOV,OAEjB,IAAK,iBACH,OAAO,2BACFzB,GADL,IAEEC,SAAS,EACTC,QAASiC,EAAOP,MAAM1B,QACtBN,KAAM,8BAGV,QACE,OAAOI,KEXwBoC,YAAgBL,IAErDA,EAAeM,IAAIhB,GAEnBiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOR,GACf,kBAAC,EAAD,QAGJS,SAASC,eAAe,SH4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACLsB,QAAQtB,MAAMA,EAAM1B,c","file":"static/js/main.c3762c06.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NewsCardStyle = styled.div`\r\n  background: #eeeeee;\r\n  border: 1px solid black;\r\n  margin: 1rem;\r\n  font-size: 10px;\r\n  width: 20vw;\r\n  display: flex;\r\n  flex-flow: column;\r\n  padding: 5px;\r\n  text-align: center;\r\n`;\r\n\r\nfunction NewsCard({ news }) {\r\n  return (\r\n    <NewsCardStyle>\r\n      <h1>{news.title}</h1>\r\n      <h2>{news.description}</h2>\r\n    </NewsCardStyle>\r\n  );\r\n}\r\n\r\nexport default NewsCard;\r\n","import React from \"react\";\nimport \"./CSS/App.css\";\nimport { getNews } from \"./Redux/ActionTypes\";\nimport { connect } from \"react-redux\";\nimport NewsCard from \"./Containers/NewsCard\";\n\nfunction App({ getNews, loading, news, message }) {\n  let newsCards = null;\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <button onClick={getNews}>Get News</button>\n      {loading && <div>Loading...</div>}\n      <div>{message}</div>\n      <div\n        style={{ display: \"flex\", flexFlow: \"row wrap\", textAlign: \"center\" }}\n      >\n        {news\n          ? (newsCards = news.map((value) => {\n              return <NewsCard news={value} />;\n            }))\n          : null}\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.loading,\n    message: state.message,\n    news: state.news,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getNews: () => dispatch(getNews()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const getNews = () => {\r\n  return { type: \"GET_NEWS\" };\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n  loading: false,\r\n  news: null,\r\n};\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"GET_NEWS\":\r\n      return { ...state, loading: true };\r\n    case \"NEWS_RECEIVED\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        news: action.json,\r\n      };\r\n    case \"REQUEST_FAILED\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        message: action.error.message,\r\n        news: \"oops, there was a problem\",\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { put, takeLatest, all } from \"redux-saga/effects\";\r\n\r\nfunction* fetchNews() {\r\n  try {\r\n    const json = yield fetch(\r\n      \"http://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=830fa194518d4388b99a572e0067da29\"\r\n    ).then((response) => response.json());\r\n    yield put({\r\n      type: \"NEWS_RECEIVED\",\r\n      json: json.articles,\r\n    });\r\n  } catch (error) {\r\n    yield put({ type: \"REQUEST_FAILED\", error });\r\n  }\r\n}\r\n\r\nfunction* actionWatcher() {\r\n  yield takeLatest(\"GET_NEWS\", fetchNews);\r\n}\r\nexport default function* rootSaga() {\r\n  yield all([actionWatcher()]);\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./CSS/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { reducer } from \"./Redux/Reducer\";\nimport createMiddleware from \"redux-saga\";\nimport rootSaga from \"./Redux/Sagas\";\n\nconst sagaMiddleware = createMiddleware();\n\nconst myStore = createStore(reducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={myStore}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}